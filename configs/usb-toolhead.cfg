# This file contains pin mappings for the LDO USB toolhead PCB.
# To use this config, the firmware should be compiled for the Raspberry Pi RP2040
# Make sure to include this config *at the end* of printer.cfg to overwrite the relevent sections

# See http://docs.ldomotors.com/en/voron/voron01/umb#compiling-and-uploading-firmware 
# For instructions on uploading/updating klipper firmware to the frame PCB

## LDO Toolhead Controller partial config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths                            [mcu] section
## Thermistor types                     [extruder] sections

## *MAKE SURE* to include this partial config file *AFTER* the main controller config. 
## This will ensure the relavent sections are overwritten by the picobilical mappings specified here.

[mcu pth]
##  Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_rp2040_E6614864D3258439-if00
restart_method: command
##--------------------------------------------------------------------

#####################################################################
#   Endstops
#####################################################################

## XES - Toolhead PCB
## Overwrites the X endstop connection 
#[stepper_x]
#endstop_pin: pth:gpio13

## YES - Toolhead PCB
## Overwrites the Y endstop connection 
#[stepper_y]
#endstop_pin: pth:gpio12

#####################################################################
# 	Extruder
#####################################################################
[extruder]
step_pin: pth:gpio23
dir_pin: pth:gpio24
enable_pin: !pth:gpio25
heater_pin: pth:gpio9
sensor_pin: pth:gpio29
pullup_resistor: 2200
max_extrude_only_distance: 1150
max_extrude_cross_section: 9999
full_steps_per_rotation: 200
nozzle_diameter: 0.400
filament_diameter: 1.75
sensor_type: ATC Semitec 104NT-4-R025H42G
min_temp: 10
max_temp: 310
max_power: 1.0
min_extrude_temp: 180
control = pid
pid_Kp=33.589
pid_Ki=4.391
pid_Kd=64.238

########
## G2 ##
########
rotation_distance: 47.088 
gear_ratio: 9:1
microsteps: 16

########
## CW2 ##
########
#rotation_distance: 22.598
#gear_ratio: 50:10
#microsteps: 16

[tmc2209 extruder]
sense_resistor: 0.100
uart_pin: pth:gpio0
tx_pin: pth:gpio1
interpolate: false
#run_current: 0.5 CW2
run_current: 0.6 #G2
#####################################################################
#   Fan Control
#####################################################################
[fan]
pin: pth:gpio6
tachometer_pin: pth:gpio17
tachometer_ppr: 2

[heater_fan hotend_fan]
pin: pth:gpio5
tachometer_pin: pth:gpio16
tachometer_ppr: 2

#####################################################################
# 	Probe
#####################################################################
#[probe]
#pin: pth:gpio10

#####################################################################
#   Lights
#####################################################################
[neopixel sb_leds]
pin: pth:gpio7
chain_count: 3
color_order: GRBW
initial_RED: 1.0
initial_GREEN: 0.0
initial_BLUE: 0.0
initial_WHITE: 0.0

[output_pin act_led]
pin: !pth:gpio8

#####################################################################
#   Accelerometer
#####################################################################
[adxl345]
cs_pin: pth:gpio21
spi_software_sclk_pin: pth:gpio18
spi_software_mosi_pin: pth:gpio20
spi_software_miso_pin: pth:gpio19

#[resonance_tester]
#accel_chip: adxl345
#probe_points:
#    125, 125, 20


#####################################################################
#   TH
# #####################################################################
#[temperature_sensor chamber_temp_float]
## Chamber Temperature - T1
#sensor_type: ATC Semitec 104NT-4-R025H42G
#sensor_type: Generic 3950
#sensor_pin: pth:gpio28
#min_temp: 0
#max_temp: 100
#gcode_id: chamber_th
#pullup_resistor: 2200

[temperature_sensor toolboard]
sensor_type: temperature_mcu
sensor_mcu: pth

## This config file contains macros that can be used in conjuction with tacho-enabled fans
##
## - PREFLIGHT_CHECK, add this to the beginning of your PRINT_START macro to check your PCF and HEF fans. 
##     If either of the fans are malfunctioning, the print job will be cancelled.
## - HEALTH_CHECK, configure your slicer to call this macro between layer changes, this will check the HEF fan between each layer. 
##     If a failure is detected, the print job will be paused and the hotend will be shutdown

[gcode_macro HEF_CHECK]
description: sub-macro of PREFLIGHT CHECK, not intended to be used outside of parent macro
gcode:
  {% if printer["heater_fan hotend_fan"].rpm > 500 %}
    {action_respond_info("Hotend fan self-test: PASS")}
  {% else %}
    CANCEL_PRINT
    {action_respond_info("Hotend fan self-test: FAIL!")}
  {% endif %}

[gcode_macro PCF_CHECK]
description: sub-macro of PREFLIGHT CHECK, not intended to be used outside of parent macro
gcode:
  {% if printer.fan.rpm > 500 %}
    {action_respond_info("Part fan self-test: PASS")}
  {% else %}
    CANCEL_PRINT
    {action_respond_info("Part fan self-test: FAIL!")}
  {% endif %}

[gcode_macro PREFLIGHT_CHECK]
description: Use before print startup, checks the hotend and part fan for failures
gcode:
  {% if printer.extruder.temperature > 100.0 %}
    HEF_CHECK ; check hotend fan speed
  {% else %}
    M104 S80  ; heat up the hotend slightly to cause the HEF to spin up
    G4 P3000  ; wait for the fan to spin up
    M400
    HEF_CHECK ; check hotend fan speed
    M104 S0   ; turn off hotend
  {% endif %}

  M106 S128 ; turn on the part fan
  G4 P3000  ; wait for the fan to spin up
  M400
  PCF_CHECK ; check part fan speed
  M106 S0   ; turn off the part fan

[gcode_macro HEALTH_CHECK]
description: Checks the status of the hotend fan, pauses the print and shuts down the hotend if the HEF is malfunctioning
gcode:
  {% set HEF_RPM = printer["heater_fan hotend_fan"].rpm %}
  {% set HE_TEMP = printer.extruder.temperature %}
  {% if HE_TEMP > 100.0 %}
    {% if HEF_RPM > 500 %}
      {action_respond_info("Hotend fan self-test: PASS")}
    {% else %}
      PAUSE
      M104 S0 ;pause and turn off hotend immediately if fan failure detected
      {action_respond_info("Hotend fan self-test: FAIL!")}
    {% endif %}
  {% endif %}